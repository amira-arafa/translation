{"ast":null,"code":"\"use strict\";\n/*\nHTML escaping is the same as React's\n(on purpose.) Therefore, it has the following Copyright and Licensing:\n\nCopyright 2013-2014, Facebook, Inc.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the LICENSE\nfile in the root directory of React's source tree.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar intl_messageformat_1 = require(\"intl-messageformat\");\n\nvar intl_format_cache_1 = require(\"intl-format-cache\"); // Since rollup cannot deal with namespace being a function,\n// this is to interop with TypeScript since `invariant`\n// does not export a default\n// https://github.com/rollup/rollup/issues/1267\n\n\nvar invariant_ = require(\"invariant\");\n\nvar invariant = invariant_.default || invariant_;\nvar ESCAPED_CHARS = {\n  38: '&amp;',\n  62: '&gt;',\n  60: '&lt;',\n  34: '&quot;',\n  39: '&#x27;'\n};\nvar UNSAFE_CHARS_REGEX = /[&><\"']/g;\n\nfunction escape(str) {\n  return ('' + str).replace(UNSAFE_CHARS_REGEX, function (match) {\n    return ESCAPED_CHARS[match.charCodeAt(0)];\n  });\n}\n\nexports.escape = escape;\n\nfunction filterProps(props, whitelist, defaults) {\n  if (defaults === void 0) {\n    defaults = {};\n  }\n\n  return whitelist.reduce(function (filtered, name) {\n    if (props.hasOwnProperty(name)) {\n      filtered[name] = props[name];\n    } else if (defaults.hasOwnProperty(name)) {\n      filtered[name] = defaults[name];\n    }\n\n    return filtered;\n  }, {});\n}\n\nexports.filterProps = filterProps;\n\nfunction invariantIntlContext(intl) {\n  invariant(intl, '[React Intl] Could not find required `intl` object. ' + '<IntlProvider> needs to exist in the component ancestry.');\n}\n\nexports.invariantIntlContext = invariantIntlContext;\n\nfunction createError(message, exception) {\n  var eMsg = exception ? \"\\n\" + exception.stack : '';\n  return \"[React Intl] \" + message + eMsg;\n}\n\nexports.createError = createError;\n\nfunction defaultErrorHandler(error) {\n  if (process.env.NODE_ENV !== 'production') {\n    console.error(error);\n  }\n}\n\nexports.defaultErrorHandler = defaultErrorHandler;\nexports.DEFAULT_INTL_CONFIG = {\n  formats: {},\n  messages: {},\n  timeZone: undefined,\n  textComponent: React.Fragment,\n  defaultLocale: 'en',\n  defaultFormats: {},\n  onError: defaultErrorHandler\n};\n\nfunction createIntlCache() {\n  return {\n    dateTime: {},\n    number: {},\n    message: {},\n    relativeTime: {},\n    pluralRules: {}\n  };\n}\n\nexports.createIntlCache = createIntlCache;\n/**\n * Create intl formatters and populate cache\n * @param cache explicit cache to prevent leaking memory\n */\n\nfunction createFormatters(cache) {\n  if (cache === void 0) {\n    cache = createIntlCache();\n  }\n\n  var RelativeTimeFormat = Intl.RelativeTimeFormat;\n  return {\n    getDateTimeFormat: intl_format_cache_1.default(Intl.DateTimeFormat, cache.dateTime),\n    getNumberFormat: intl_format_cache_1.default(Intl.NumberFormat, cache.number),\n    getMessageFormat: intl_format_cache_1.default(intl_messageformat_1.default, cache.message),\n    getRelativeTimeFormat: intl_format_cache_1.default(RelativeTimeFormat, cache.relativeTime),\n    getPluralRules: intl_format_cache_1.default(Intl.PluralRules, cache.pluralRules)\n  };\n}\n\nexports.createFormatters = createFormatters;\n\nfunction getNamedFormat(formats, type, name, onError) {\n  var formatType = formats && formats[type];\n  var format;\n\n  if (formatType) {\n    format = formatType[name];\n  }\n\n  if (format) {\n    return format;\n  }\n\n  onError(createError(\"No \" + type + \" format named: \" + name));\n}\n\nexports.getNamedFormat = getNamedFormat;","map":null,"metadata":{},"sourceType":"script"}