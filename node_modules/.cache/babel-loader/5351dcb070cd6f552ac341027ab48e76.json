{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar hoistNonReactStatics_ = require(\"hoist-non-react-statics\"); // Since rollup cannot deal with namespace being a function,\n// this is to interop with TypeScript since `invariant`\n// does not export a default\n// https://github.com/rollup/rollup/issues/1267\n\n\nvar hoistNonReactStatics = hoistNonReactStatics_.default || hoistNonReactStatics_;\n\nvar utils_1 = require(\"../utils\");\n\nfunction getDisplayName(Component) {\n  return Component.displayName || Component.name || 'Component';\n} // TODO: We should provide initial value here\n\n\nvar IntlContext = React.createContext(null);\nvar IntlConsumer = IntlContext.Consumer,\n    IntlProvider = IntlContext.Provider;\nexports.Provider = IntlProvider;\nexports.Context = IntlContext;\n\nfunction injectIntl(WrappedComponent, options) {\n  var _a = options || {},\n      _b = _a.intlPropName,\n      intlPropName = _b === void 0 ? 'intl' : _b,\n      _c = _a.forwardRef,\n      forwardRef = _c === void 0 ? false : _c,\n      _d = _a.enforceContext,\n      enforceContext = _d === void 0 ? true : _d;\n\n  var WithIntl = function (props) {\n    return React.createElement(IntlConsumer, null, function (intl) {\n      var _a;\n\n      if (enforceContext) {\n        utils_1.invariantIntlContext(intl);\n      }\n\n      return React.createElement(WrappedComponent, __assign({}, props, (_a = {}, _a[intlPropName] = intl, _a), {\n        ref: forwardRef ? props.forwardedRef : null\n      }));\n    });\n  };\n\n  WithIntl.displayName = \"injectIntl(\" + getDisplayName(WrappedComponent) + \")\";\n  WithIntl.WrappedComponent = WrappedComponent;\n\n  if (forwardRef) {\n    return hoistNonReactStatics(React.forwardRef(function (props, ref) {\n      return React.createElement(WithIntl, __assign({}, props, {\n        forwardedRef: ref\n      }));\n    }), WrappedComponent);\n  }\n\n  return hoistNonReactStatics(WithIntl, WrappedComponent);\n}\n\nexports.default = injectIntl;","map":null,"metadata":{},"sourceType":"script"}