{"ast":null,"code":"\"use strict\";\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar intl_utils_1 = require(\"@formatjs/intl-utils\");\n\nfunction validateInstance(instance, method) {\n  if (!(instance instanceof PluralRules)) {\n    throw new TypeError(\"Method Intl.PluralRules.prototype.\" + method + \" called on incompatible receiver \" + String(instance));\n  }\n}\n/**\n * https://tc39.es/ecma402/#sec-defaultnumberoption\n * @param val\n * @param min\n * @param max\n * @param fallback\n */\n\n\nfunction defaultNumberOption(val, min, max, fallback) {\n  if (val !== undefined) {\n    val = Number(val);\n\n    if (isNaN(val) || val < min || val > max) {\n      throw new RangeError(val + \" is outside of range [\" + min + \", \" + max + \"]\");\n    }\n\n    return Math.floor(val);\n  }\n\n  return fallback;\n}\n/**\n * https://tc39.es/ecma402/#sec-getnumberoption\n * @param options\n * @param property\n * @param min\n * @param max\n * @param fallback\n */\n\n\nfunction getNumberOption(options, property, min, max, fallback) {\n  var val = options[property];\n  return defaultNumberOption(val, min, max, fallback);\n}\n/**\n * https://tc39.es/ecma402/#sec-setnfdigitoptions\n * https://tc39.es/proposal-unified-intl-numberformat/section11/numberformat_diff_out.html#sec-setnfdigitoptions\n * @param pl\n * @param opts\n * @param mnfdDefault\n * @param mxfdDefault\n */\n\n\nfunction setNumberFormatDigitOptions(internalSlotMap, pl, opts, mnfdDefault, mxfdDefault) {\n  var mnid = getNumberOption(opts, 'minimumIntegerDigits', 1, 21, 1);\n  var mnfd = opts.minimumFractionDigits;\n  var mxfd = opts.maximumFractionDigits;\n  var mnsd = opts.minimumSignificantDigits;\n  var mxsd = opts.maximumSignificantDigits;\n  intl_utils_1.setInternalSlot(internalSlotMap, pl, 'minimumIntegerDigits', mnid);\n  intl_utils_1.setInternalSlot(internalSlotMap, pl, 'minimumFractionDigits', mnfd);\n  intl_utils_1.setInternalSlot(internalSlotMap, pl, 'maximumFractionDigits', mxfd);\n\n  if (mnsd !== undefined || mxsd !== undefined) {\n    intl_utils_1.setInternalSlot(internalSlotMap, pl, 'roundingType', 'significantDigits');\n    mnsd = defaultNumberOption(mnsd, 1, 21, 1);\n    mxsd = defaultNumberOption(mxsd, mnsd, 21, 21);\n    intl_utils_1.setInternalSlot(internalSlotMap, pl, 'minimumSignificantDigits', mnsd);\n    intl_utils_1.setInternalSlot(internalSlotMap, pl, 'maximumSignificantDigits', mxsd);\n  } else if (mnfd !== undefined || mxfd !== undefined) {\n    intl_utils_1.setInternalSlot(internalSlotMap, pl, 'roundingType', 'fractionDigits');\n    mnfd = defaultNumberOption(mnfd, 0, 20, mnfdDefault);\n    var mxfdActualDefault = Math.max(mnfd, mxfdDefault);\n    mxfd = defaultNumberOption(mxfd, mnfd, 20, mxfdActualDefault);\n    intl_utils_1.setInternalSlot(internalSlotMap, pl, 'minimumFractionDigits', mnfd);\n    intl_utils_1.setInternalSlot(internalSlotMap, pl, 'maximumFractionDigits', mxfd);\n  } else if (intl_utils_1.getInternalSlot(internalSlotMap, pl, 'notation') === 'compact') {\n    intl_utils_1.setInternalSlot(internalSlotMap, pl, 'roundingType', 'compactRounding');\n  } else {\n    intl_utils_1.setInternalSlot(internalSlotMap, pl, 'roundingType', 'fractionDigits');\n    intl_utils_1.setInternalSlot(internalSlotMap, pl, 'minimumFractionDigits', mnfdDefault);\n    intl_utils_1.setInternalSlot(internalSlotMap, pl, 'maximumFractionDigits', mxfdDefault);\n  }\n}\n/**\n * https://tc39.es/ecma402/#sec-torawprecision\n * @param x\n * @param minPrecision\n * @param maxPrecision\n */\n\n\nfunction toRawPrecision(x, minPrecision, maxPrecision) {\n  var m = x.toPrecision(maxPrecision);\n\n  if (~m.indexOf('.') && maxPrecision > minPrecision) {\n    var cut = maxPrecision - minPrecision;\n\n    while (cut > 0 && m[m.length - 1] === '0') {\n      m = m.slice(0, m.length - 1);\n      cut--;\n    }\n\n    if (m[m.length - 1] === '.') {\n      return m.slice(0, m.length - 1);\n    }\n  }\n\n  return m;\n}\n/**\n * https://tc39.es/ecma402/#sec-torawfixed\n * @param x\n * @param minInteger\n * @param minFraction\n * @param maxFraction\n */\n\n\nfunction toRawFixed(x, minInteger, minFraction, maxFraction) {\n  var cut = maxFraction - minFraction;\n  var m = x.toFixed(maxFraction);\n\n  while (cut > 0 && m[m.length - 1] === '0') {\n    m = m.slice(0, m.length - 1);\n    cut--;\n  }\n\n  if (m[m.length - 1] === '.') {\n    m = m.slice(0, m.length - 1);\n  }\n\n  var int = m.split('.')[0].length;\n\n  if (int < minInteger) {\n    var z = '';\n\n    for (; z.length < minInteger - int; z += '0');\n\n    m = z + m;\n  }\n\n  return m;\n}\n\nfunction formatNumericToString(internalSlotMap, pl, x) {\n  var minimumSignificantDigits = intl_utils_1.getInternalSlot(internalSlotMap, pl, 'minimumSignificantDigits');\n  var maximumSignificantDigits = intl_utils_1.getInternalSlot(internalSlotMap, pl, 'maximumSignificantDigits');\n\n  if (minimumSignificantDigits !== undefined && maximumSignificantDigits !== undefined) {\n    return toRawPrecision(x, minimumSignificantDigits, maximumSignificantDigits);\n  }\n\n  return toRawFixed(x, intl_utils_1.getInternalSlot(internalSlotMap, pl, 'minimumIntegerDigits'), intl_utils_1.getInternalSlot(internalSlotMap, pl, 'minimumFractionDigits'), intl_utils_1.getInternalSlot(internalSlotMap, pl, 'maximumFractionDigits'));\n}\n\nvar PluralRules =\n/** @class */\nfunction () {\n  function PluralRules(locales, options) {\n    // test262/test/intl402/RelativeTimeFormat/constructor/constructor/newtarget-undefined.js\n    // Cannot use `new.target` bc of IE11 & TS transpiles it to something else\n    var newTarget = this && this instanceof PluralRules ? this.constructor : void 0;\n\n    if (!newTarget) {\n      throw new TypeError(\"Intl.PluralRules must be called with 'new'\");\n    }\n\n    var requestedLocales = intl_utils_1.getCanonicalLocales(locales);\n    var opt = Object.create(null);\n    var opts = options === undefined ? Object.create(null) : intl_utils_1.toObject(options);\n    intl_utils_1.setInternalSlot(PluralRules.__INTERNAL_SLOT_MAP__, this, 'initializedPluralRules', true);\n    var matcher = intl_utils_1.getOption(opts, 'localeMatcher', 'string', ['best fit', 'lookup'], 'best fit');\n    opt.localeMatcher = matcher; // test262/test/intl402/PluralRules/prototype/select/tainting.js\n    // TODO: This is kinda cheating, but unless we rely on WeakMap to\n    // hide the internal slots it's hard to be completely safe from tainting\n\n    intl_utils_1.setInternalSlot(PluralRules.__INTERNAL_SLOT_MAP__, this, 'type', intl_utils_1.getOption(opts, 'type', 'string', ['cardinal', 'ordinal'], 'cardinal'));\n    setNumberFormatDigitOptions(PluralRules.__INTERNAL_SLOT_MAP__, this, opts, 0, 3);\n    var r = intl_utils_1.createResolveLocale(PluralRules.getDefaultLocale)(PluralRules.availableLocales, requestedLocales, opt, PluralRules.relevantExtensionKeys, PluralRules.localeData);\n    intl_utils_1.setInternalSlot(PluralRules.__INTERNAL_SLOT_MAP__, this, 'locale', r.locale);\n  }\n\n  PluralRules.prototype.resolvedOptions = function () {\n    var _this = this;\n\n    validateInstance(this, 'resolvedOptions');\n    var opts = Object.create(Object.prototype);\n    opts.locale = intl_utils_1.getInternalSlot(PluralRules.__INTERNAL_SLOT_MAP__, this, 'locale');\n    opts.type = intl_utils_1.getInternalSlot(PluralRules.__INTERNAL_SLOT_MAP__, this, 'type');\n    ['minimumIntegerDigits', 'minimumFractionDigits', 'maximumFractionDigits', 'minimumSignificantDigits', 'maximumSignificantDigits'].forEach(function (field) {\n      var val = intl_utils_1.getInternalSlot(PluralRules.__INTERNAL_SLOT_MAP__, _this, field);\n\n      if (val !== undefined) {\n        opts[field] = val;\n      }\n    });\n    opts.pluralCategories = __spreadArrays(PluralRules.localeData[opts.locale].categories[opts.type]);\n    return opts;\n  };\n\n  PluralRules.prototype.select = function (val) {\n    validateInstance(this, 'select');\n    var locale = intl_utils_1.getInternalSlot(PluralRules.__INTERNAL_SLOT_MAP__, this, 'locale');\n    var type = intl_utils_1.getInternalSlot(PluralRules.__INTERNAL_SLOT_MAP__, this, 'type');\n    return PluralRules.localeData[locale].fn(formatNumericToString(PluralRules.__INTERNAL_SLOT_MAP__, this, Math.abs(Number(val))), type == 'ordinal');\n  };\n\n  PluralRules.prototype.toString = function () {\n    return '[object Intl.PluralRules]';\n  };\n\n  PluralRules.supportedLocalesOf = function (locales, options) {\n    return intl_utils_1.supportedLocales(PluralRules.availableLocales, intl_utils_1.getCanonicalLocales(locales), options);\n  };\n\n  PluralRules.__addLocaleData = function () {\n    var data = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      data[_i] = arguments[_i];\n    }\n\n    var _loop_1 = function (datum) {\n      var availableLocales = Object.keys(__spreadArrays(datum.availableLocales, Object.keys(datum.aliases), Object.keys(datum.parentLocales)).reduce(function (all, k) {\n        all[k] = true;\n        return all;\n      }, {}));\n      availableLocales.forEach(function (locale) {\n        try {\n          PluralRules.localeData[locale] = intl_utils_1.unpackData(locale, datum);\n        } catch (e) {\n          if (intl_utils_1.isMissingLocaleDataError(e)) {\n            // If we just don't have data for certain locale, that's ok\n            return;\n          }\n\n          throw e;\n        }\n      });\n    };\n\n    for (var _a = 0, data_1 = data; _a < data_1.length; _a++) {\n      var datum = data_1[_a];\n\n      _loop_1(datum);\n    }\n\n    PluralRules.availableLocales = Object.keys(PluralRules.localeData);\n\n    if (!PluralRules.__defaultLocale) {\n      PluralRules.__defaultLocale = PluralRules.availableLocales[0];\n    }\n  };\n\n  PluralRules.getDefaultLocale = function () {\n    return PluralRules.__defaultLocale;\n  };\n\n  PluralRules.localeData = {};\n  PluralRules.availableLocales = [];\n  PluralRules.__defaultLocale = 'en';\n  PluralRules.relevantExtensionKeys = [];\n  PluralRules.polyfilled = true;\n  PluralRules.__INTERNAL_SLOT_MAP__ = new WeakMap();\n  return PluralRules;\n}();\n\nexports.PluralRules = PluralRules;\n\ntry {\n  // https://github.com/tc39/test262/blob/master/test/intl402/PluralRules/length.js\n  Object.defineProperty(PluralRules, 'length', {\n    value: 0,\n    writable: false,\n    enumerable: false,\n    configurable: true\n  }); // https://github.com/tc39/test262/blob/master/test/intl402/RelativeTimeFormat/constructor/length.js\n\n  Object.defineProperty(PluralRules.prototype.constructor, 'length', {\n    value: 0,\n    writable: false,\n    enumerable: false,\n    configurable: true\n  }); // https://github.com/tc39/test262/blob/master/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/length.js\n\n  Object.defineProperty(PluralRules.supportedLocalesOf, 'length', {\n    value: 1,\n    writable: false,\n    enumerable: false,\n    configurable: true\n  });\n} catch (ex) {// Meta fixes for test262\n}","map":null,"metadata":{},"sourceType":"script"}